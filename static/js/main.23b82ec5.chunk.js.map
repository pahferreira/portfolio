{"version":3,"sources":["utils/PrivateRoute.tsx","views/Home/styled.ts","components/Navbar/styled.ts","enums/actions.ts","components/Navbar/index.tsx","views/Home/index.tsx","routes/paths.ts","routes/index.tsx","storage/ducks/auth.ts","storage/ducks/index.ts","storage/saga/auth.ts","storage/saga/index.ts","storage/index.ts","utils/GlobalTheme.ts","utils/theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PrivateRoute","exact","Component","component","path","localStorage","getItem","to","Container","styled","div","Title","p","theme","fontFamilies","nunito","fontSizes","sectionTitle","colors","secondary","title","Subtitle","lato","subtitle","text","blink","keyframes","Cursor","span","typing","EGlobalActions","Grid","background","NavLink","Link","active","primary","OPTIONS","url","label","Navbar","container","direction","justify","map","option","key","window","location","pathname","includes","WORDS","sleep","milliseconds","Promise","resolve","setTimeout","paths","useState","activeWordIndex","setActiveWordIndex","wordToShow","setwordToShow","isTyping","setIsTyping","typeAndErase","word","a","i","prevState","length","slice","useEffect","RouterContainer","route","private","process","initialState","user","appReducer","combineReducers","auth","state","action","type","authSaga","rootSaga","fork","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","RESET","undefined","applyMiddleware","run","StyledApp","createGlobalStyle","lightPrimary","small","App","GlobalTheme","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23b82ec5.chunk.js","sourcesContent":["import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\ninterface Props {\n  exact?: boolean\n  component: React.FunctionComponent\n  path: string\n}\n\nconst PrivateRoute = ({ exact, component: Component, path }: Props) => {\n  const token = localStorage.getItem('access_token')\n\n  const renderComponent = () => {\n    if (token) {\n      return (\n        <Route\n          exact={exact ? exact : false}\n          path={path}\n          component={Component}\n        />\n      )\n    }\n    return <Redirect to=\"/\" />\n  }\n\n  return renderComponent()\n}\n\nexport default PrivateRoute\n","import styled, { keyframes } from 'styled-components'\n\nexport const Container = styled.div`\n  height: 90vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`\n\nexport const Title = styled.p`\n  margin: 10px 0;\n  font-family: ${({ theme }) => theme.fontFamilies.nunito};\n  font-size: ${({ theme }) => theme.fontSizes.sectionTitle};\n  color: ${({ theme }) => theme.colors.secondary};\n  text-transform: uppercase;\n  text-align: center;\n  @media screen and (max-width: 600px) {\n    font-size: ${({ theme }) => theme.fontSizes.title};\n  }\n`\n\nexport const Subtitle = styled.p`\n  margin: 0;\n  font-family: ${({ theme }) => theme.fontFamilies.lato};\n  font-size: ${({ theme }) => theme.fontSizes.subtitle};\n  color: ${({ theme }) => theme.colors.text};\n`\n\nconst blink = keyframes`\n  0% { opacity: 1 }\n  49% { opacity: 1 }\n  50% { opacity: 0 }\n  99% { opacity: 0 }\n  100% { opacity: 1 }\n`\n\ntype CursorProps = {\n  typing?: boolean\n}\n\nexport const Cursor = styled.span<CursorProps>`\n  display: inline-block;\n  width: 3px;\n  height: 100%;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  margin-left: 5px;\n  animation: ${blink} 1s infinite;\n  animation: ${({ typing }) => typing && 'none'};\n`\n","import styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Grid } from '@material-ui/core'\n\nexport const Container = styled(Grid)`\n  background-color: ${({ theme }) => theme.colors.background};\n  padding: 20px;\n  height: 10vh;\n`\ntype NavLinkProps = {\n  active: string\n}\n\nexport const NavLink = styled(Link)<NavLinkProps>`\n  font-size: ${({ theme }) => theme.fontSizes.text};\n  color: ${({ active, theme }) =>\n    active === 'true' ? theme.colors.secondary : theme.colors.primary};\n  margin: 0px 20px;\n`\n","export enum EGlobalActions {\n  RESET = 'GLOBAL/RESET'\n}\n","import React, { FC } from 'react'\nimport { Container, NavLink } from './styled'\n\ntype Option = {\n  url: string\n  label: string\n}\n\nconst OPTIONS = [\n  {\n    url: '/portfolio',\n    label: 'Home',\n  },\n  {\n    url: 'about',\n    label: 'About',\n  },\n  {\n    url: 'projects',\n    label: 'Projects',\n  },\n  {\n    url: 'skills',\n    label: 'Skills',\n  },\n  {\n    url: 'contact',\n    label: 'Contact',\n  },\n]\n\nconst Navbar: FC = () => {\n  return (\n    <Container container direction=\"row\" justify=\"flex-end\">\n      {OPTIONS.map((option: Option) => (\n        <NavLink\n          key={option.label}\n          to={option.url}\n          active={\n            window.location.pathname.includes(option.url) ? 'true' : 'false'\n          }>\n          {option.label}\n        </NavLink>\n      ))}\n    </Container>\n  )\n}\n\nexport default Navbar\n","import React, { FC, useState, useEffect } from 'react'\nimport { Container, Subtitle, Title, Cursor } from './styled'\nimport Navbar from 'components/Navbar'\n\nconst WORDS = ['Creative', 'Hard Worker', 'Frontend', 'React', 'React Native']\nconst TYPING_DELAY = 150\nconst ERASING_DELAY = 100\nconst START_TO_ERASE_DELAY = 1500\nconst NEXT_WORD = 1000\n\nconst sleep = (milliseconds: number) => {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds))\n}\n\nconst Home: FC = () => {\n  const [activeWordIndex, setActiveWordIndex] = useState<number>(0)\n  const [wordToShow, setwordToShow] = useState<string>('')\n  const [isTyping, setIsTyping] = useState(true)\n\n  const typeAndErase = async (word: string) => {\n    // Typing\n    setIsTyping(true)\n    for (let i = 0; i < word.length; i++) {\n      await sleep(TYPING_DELAY)\n      setwordToShow((prevState) => prevState + word[i])\n    }\n    setIsTyping(false)\n    await sleep(START_TO_ERASE_DELAY)\n    setIsTyping(true)\n    // Erasing\n    for (let i = 0; i < word.length; i++) {\n      await sleep(ERASING_DELAY)\n      setwordToShow((prevState) => prevState.slice(0, prevState.length - 1))\n    }\n    // Next Word\n    setIsTyping(false)\n    await sleep(NEXT_WORD)\n    setActiveWordIndex((prevState) => (prevState + 1) % WORDS.length)\n  }\n\n  useEffect(() => {\n    typeAndErase(WORDS[activeWordIndex])\n  }, [activeWordIndex])\n\n  return (\n    <>\n      <Navbar />\n      <Container>\n        <Subtitle>If you're searching for a</Subtitle>\n        <Title>\n          {wordToShow}\n          <Cursor typing={isTyping}>&nbsp;</Cursor>\n        </Title>\n        <Subtitle>Developer. You came to the right place!</Subtitle>\n      </Container>\n    </>\n  )\n}\n\nexport default Home\n","import Home from '../views/Home'\n\nconst paths = [\n  {\n    path: '/',\n    component: Home\n  }\n]\n\nexport default paths\n","import React, { FC } from 'react'\nimport { Switch, BrowserRouter as Router, Route } from 'react-router-dom'\nimport PrivateRoute from '../utils/PrivateRoute'\nimport paths from './paths'\nimport TRoute from '../types/router'\n\nconst RouterContainer: FC = () => {\n  return (\n    <Router>\n      <Switch>\n        {paths.map((route: TRoute) => {\n          if (route.private) {\n            return (\n              <PrivateRoute\n                exact\n                component={route.component}\n                path={process.env.PUBLIC_URL + route.path}\n              />\n            )\n          }\n          return (\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + route.path}\n              component={route.component}\n              key={route.path}\n            />\n          )\n        })}\n      </Switch>\n    </Router>\n  )\n}\n\nexport default RouterContainer\n","import { TState } from '../../types/auth'\nimport { TAction } from '../../types/storage'\n\n// ACTION TYPES\nexport const Types = {}\n\n// INITIAL STATE\nconst initialState: TState = {\n  user: {}\n}\n\n// REDUCER\nexport default (state: TState = initialState, action: TAction): TState => {\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { TAction, TStore } from 'types/storage'\nimport { EGlobalActions } from 'enums/actions'\n\n// Reducers\nimport auth from './auth'\n\nconst appReducer = combineReducers<TStore | undefined, TAction>({\n  auth,\n})\n\nexport default (state: TStore, action: TAction) => {\n  if (action.type === EGlobalActions.RESET) {\n    return appReducer(undefined, action)\n  }\n  return appReducer(state, action)\n}\n","export default function* authSaga() {}\n","import { fork } from 'redux-saga/effects'\n\n// Sagas\nimport authSaga from './auth'\n\nexport default function* rootSaga() {\n  yield [fork(authSaga)]\n}\n","import { applyMiddleware, createStore, compose } from 'redux'\nimport createSagaMiddleware, { SagaMiddleware } from 'redux-saga'\nimport ReduxDucks from './ducks'\nimport rootSaga from './saga'\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\n  }\n}\n\nconst sagaMiddleware: SagaMiddleware = createSagaMiddleware()\n\nconst composeEnhancers: typeof compose =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore<any, any, any, any>(\n  ReduxDucks,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n)\n\nsagaMiddleware.run(rootSaga)\n\nexport default store\n","import { createGlobalStyle } from 'styled-components'\nimport { Theme } from './theme'\n\nconst StyledApp = createGlobalStyle<{ theme: Theme }>`\nbody {\n  margin: 0;\n  background-color: ${({ theme }) => theme.colors.background};\n  min-height: 100vh;\n  font-family: Nunito, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n  #root {\n    height: 100%;\n    overflow: hidden;\n    box-sizing: border-box;\n  }\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n  *{\n    box-sizing: border-box;\n  }\n`\nexport default StyledApp\n","const theme = {\n  colors: {\n    background: '#24213E',\n    text: '#D4D4D4',\n    primary: '#5E548E',\n    secondary: '#E4E4A8',\n    lightPrimary: '#322F4D',\n  },\n  fontSizes: {\n    sectionTitle: '4.2rem',\n    title: '2rem',\n    subtitle: '1.2rem',\n    text: '1rem',\n    small: '12px',\n  },\n  fontFamilies: {\n    nunito: 'Nunito',\n    lato: 'Lato',\n  },\n}\n\nexport type Theme = typeof theme\nexport default theme\n","import React from 'react'\nimport './App.css'\nimport Routes from './routes'\nimport { Provider } from 'react-redux'\nimport store from './storage'\nimport { ThemeProvider } from 'styled-components'\nimport GlobalTheme from 'utils/GlobalTheme'\nimport theme from 'utils/theme'\nimport { BrowserRouter as Router, Switch } from 'react-router-dom'\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalTheme />\n        <Router>\n          <Switch>\n            <Routes />\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}